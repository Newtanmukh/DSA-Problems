    #include<bits/stdc++.h>
    using namespace std;
     
    vector<long> a[100010];
    bool visited[100010]={0};
    long long int c[100010];
     
    void dfs(long x, long long int &cst)
    {
    	visited[x]=1;
    	cst=min(cst, c[x]);
    	for(long i=0; i<a[x].size(); i++)
    	{
    		if(!visited[a[x][i]])
    		dfs(a[x][i], cst);
    	}
    }
     
    int main()
    {
    	long n, m;  cin>>n>>m;
    	
    	for(long i=1; i<=n; i++)
    	cin>>c[i];
    	
    	for(long i=1; i<=m; i++)
    	{
    		long u, v;  cin>>u>>v;
    		a[v].push_back(u);
    		a[u].push_back(v);
    	}
    	
    	long long int cost=0;
    	
    	for(long i=1; i<=n; i++)
    	{
    		if(!visited[i])                                    //suppose that we have an vertex i such that it has no edge with any other vertex.
    		{
    			long long int cst=1000000010;
    			dfs(i, cst);
    			cost+=cst;
    		}
    	}
    	
    	cout<<cost;
    }