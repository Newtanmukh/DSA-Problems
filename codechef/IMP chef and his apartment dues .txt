//notice the pattern that for 010,011,001 ,000  all of these will have to pay the same fine. this is because once a first 0 occurs,
if many ones follow after tha,still they will have to relocate their positions. so all of them will give the same result.


#include <iostream>
using namespace std;

int main() {
int t;
cin>>t;
while(t-- > 0){
	int n,c=1000000,n1=0,n0=0,sum=0;
	cin>>n;
	int a[n];
	for(int i=0;i<n;i++) {
	    cin>>a[i];
	}
	for(int i=0;i<n;i++) {
	    if(a[i]==0){
	        c=i;
	        break;                  
	    }
	}
	for(int i=0;i<n;i++){
	    if(a[i]==0){
	        n0++;
	    }
	    if(a[i]==1){
	        n1++;
	    }
	}
	if(c==1000000){
	    sum=n0*1000;
	}
	if(c<1000000){
	sum = n0*1000 + (n-c)*100;
	}
	std::cout << sum << std::endl;
}
	return 0;
}




////////////////////////alternate code

#include <iostream>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    int n,c=0,i,j,x=0;
	    cin>>n;
	    int a[n];
	    for(i=0;i<n;i++)
	    cin>>a[i];
	    for(int i=0;i<n;i++)
	    {
	        if(a[i]==0)
	        {
	        	c+=1100;
	        }
	        else if(a[i]==1)                  
	        if(c!=0)                                     // it means that,if we have encountered a 0 before then we will have to shift this 1.
                                                             // since now this 1 will now be shifted to somewhere before this current position,
                                                             // and the 1000 for the previous 0 position has already been done,so we  will now addonly 1.
	        c+=100;
	    }
	    cout<<c<<"\n";
	}
	return 0;
}

