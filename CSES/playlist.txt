// C++ program to implement 
// the above approach 
#include <bits/stdc++.h> 
using namespace std; 

// Function to find largest 
// subarray with no dublicates 
int largest_subarray(int a[], int n) 
{ 
	// Stores index of array elements 
	unordered_map<int, int> index; 
	int ans = 0; 
	for (int i = 0, j = 0; i < n; i++) { 

		// Update j based on previous 
		// occurrence of a[i] 
		j = max(index[a[i]], j); 

		// Update ans to store maximum 
		// length of subarray 
		ans = max(ans, i - j+1 ); 

		// Store the index of current 
		// occurrence of a[i] 
		index[a[i]] = i +1; 
	} 

	// Return final ans 
	return ans; 
} 

// Driver Code 
int32_t main() 
{ 
	int n;
cin>>n;
int arr[n];
int i;
for(i=0;i<n;i++)

{cin>>arr[i];} 
	int x = sizeof(arr) / sizeof(arr[0]); 
	cout << largest_subarray(arr, x); 
} 


/* -------------------------------------------------------------------------------------------------------------------------------------------------------




#include <bits/stdc++.h>
using namespace std;

#define rep(i, a, b) for(int i = a; i < (b); ++i)
#define trav(a, x) for(auto& a : x)
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()
typedef long long ll;
typedef pair<int, int> pii;
typedef vector<int> vi;

int main() {
    cin.sync_with_stdio(0); cin.tie(0);
    cin.exceptions(cin.failbit);
    
    int n, b=0, ans=0;
    cin >> n;
    map<int, int> last;
    rep(i, 1, n+1) {
        int a;
        cin >> a;
        b=max(b, last[a]);
        ans=max(ans, i-b);
        last[a]=i;
    }
    cout << ans << '\n';
    return 0;
} 

*/